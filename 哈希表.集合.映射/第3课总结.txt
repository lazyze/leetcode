哈希表 hash table
又称散列表，是一种可以通过“关键码（key）”直接访问的数据结构

哈希表由两部分组成
    一个数据结构，通常是链表、数组
    hash函数，输入“关键码（key）”，返回数据结构的索引

对外表现为可以通过关键码直接访问： hash_table[key] = value
实际上是在数据结构的hash(key)位置处存储了value：data_structure[hash(key)] = value

最简单的例子，关键码是整数，定义hash(key) = key
这个哈希表其实就是一个数组，key自己就是下标

一般情况下，关键码key是一个比较复杂的信息，比如很大的数、字符串
这时候key就不能直接作为数据结构的下标，此时需要设计一个hash函数，把复杂信息映射到一个较小的值域内，作为索引

哈希碰撞 collisions
指的是两个不同的key被计算出同样的hash结果

把复杂信息映射到小的值域，发生碰撞是不可避免的
好的hash函数可以减少碰撞发生的概率，让数据尽可能均衡分布

开散列是常见的碰撞解决方案
    hash函数依然用于计算数组下标
    数组的每一个位置存储一个链表的表头指针
    每个链表保存具有同样hash值的数据

大整数取模 99991质数
